"use client"

import { Input } from "@packages/ui/components/base/input"

import { useEffect, useState } from "react"
import { useTheme } from "next-themes"
import { Moon, Sun, Laptop, Palette, Type, Layout, Sliders, Save } from "lucide-react"
import { Button } from "@packages/ui/components/base/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@packages/ui/components/base/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@packages/ui/components/base/tabs"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@packages/ui/components/base/accordion"
import { Label } from "@packages/ui/components/base/label"
import { RadioGroup, RadioGroupItem } from "@packages/ui/components/base/radio-group"
import { Slider } from "@packages/ui/components/base/slider"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@packages/ui/components/base/select"
import { Switch } from "@packages/ui/components/base/switch"
import { ColorPicker } from "./color-picker"
import { ThemeManager } from "./theme-manager"
import {
  THEME_CONFIG_KEY,
  type ThemeConfig,
  defaultThemeConfig,
  darkThemeDefaults,
  themeOptions,
  calculateTypeScale,
  generateShadows,
  generateSpacing,
  hexToHSL,
  checkContrast,
} from "@/lib/theme-config"

export function ThemeCustomizer() {
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)
  const [config, setConfig] = useState<ThemeConfig>(defaultThemeConfig)
  const [previewDarkMode, setPreviewDarkMode] = useState(false)
  const [autoGenerateDarkMode, setAutoGenerateDarkMode] = useState(true)

  // Load config from localStorage
  useEffect(() => {
    setMounted(true)
    const savedConfig = localStorage.getItem(THEME_CONFIG_KEY)
    if (savedConfig) {
      try {
        setConfig(JSON.parse(savedConfig))
      } catch (e) {
        console.error("Failed to parse theme config:", e)
      }
    }
  }, [])

  // Save config to localStorage and apply changes
  useEffect(() => {
    if (!mounted) return

    localStorage.setItem(THEME_CONFIG_KEY, JSON.stringify(config))

    // Apply theme changes to CSS variables
    applyThemeChanges(config, previewDarkMode)
  }, [config, mounted, previewDarkMode])

  // Apply theme changes to CSS variables
  const applyThemeChanges = (config: ThemeConfig, isDark: boolean) => {
    const root = document.documentElement

    // Apply color scheme
    if (isDark) {
      root.classList.add("dark")
    } else {
      root.classList.remove("dark")
    }

    // Apply font family
    root.style.setProperty("--font-primary", `var(${config.fontFamily})`)

    // Apply font sizes
    const fontSizes = calculateTypeScale(config.baseFontSize, config.scaleRatio)
    Object.entries(fontSizes).forEach(([size, value]) => {
      root.style.setProperty(`--font-size-${size}`, value)
    })

    // Apply font weights
    root.style.setProperty("--font-weight-headings", config.fontWeights.headings.toString())
    root.style.setProperty("--font-weight-body", config.fontWeights.body.toString())

    // Apply border radius
    root.style.setProperty("--border-radius", `${config.borderRadius}px`)

    // Apply primary color
    root.style.setProperty("--primary", hexToHSL(config.primaryColor))

    // Apply secondary color
    root.style.setProperty("--secondary", hexToHSL(config.secondaryColor))

    // Apply semantic colors
    root.style.setProperty("--success", hexToHSL(config.semanticColors.success))
    root.style.setProperty("--warning", hexToHSL(config.semanticColors.warning))
    root.style.setProperty("--error", hexToHSL(config.semanticColors.error))
    root.style.setProperty("--info", hexToHSL(config.semanticColors.info))

    // Apply background colors
    if (isDark && autoGenerateDarkMode) {
      // Use dark mode defaults
      root.style.setProperty("--background", hexToHSL(darkThemeDefaults.backgroundColors.page))
      root.style.setProperty("--card", hexToHSL(darkThemeDefaults.backgroundColors.card))
      root.style.setProperty("--popover", hexToHSL(darkThemeDefaults.backgroundColors.modal))
    } else {
      root.style.setProperty("--background", hexToHSL(config.backgroundColors.page))
      root.style.setProperty("--card", hexToHSL(config.backgroundColors.card))
      root.style.setProperty("--popover", hexToHSL(config.backgroundColors.modal))
    }

    // Apply button styles
    root.style.setProperty("--button-primary", hexToHSL(config.buttonStyles.primaryBg))

    if (isDark && autoGenerateDarkMode) {
      root.style.setProperty("--button-secondary", hexToHSL(darkThemeDefaults.buttonStyles.secondaryBg))
    } else {
      root.style.setProperty("--button-secondary", hexToHSL(config.buttonStyles.secondaryBg))
    }

    root.style.setProperty("--button-tertiary", hexToHSL(config.buttonStyles.tertiaryBg))

    // Apply input styles
    if (isDark && autoGenerateDarkMode) {
      root.style.setProperty("--input-border", hexToHSL(darkThemeDefaults.inputStyles.borderColor))
    } else {
      root.style.setProperty("--input-border", hexToHSL(config.inputStyles.borderColor))
    }

    root.style.setProperty("--input-focus-border", hexToHSL(config.inputStyles.focusBorderColor))
    root.style.setProperty("--input-error-border", hexToHSL(config.inputStyles.errorBorderColor))

    // Apply table styles
    if (isDark && autoGenerateDarkMode) {
      root.style.setProperty("--table-header", hexToHSL(darkThemeDefaults.tableStyles.headerBg))
      root.style.setProperty("--table-row", hexToHSL(darkThemeDefaults.tableStyles.rowBg))
      root.style.setProperty("--table-border", hexToHSL(darkThemeDefaults.tableStyles.borderColor))
    } else {
      root.style.setProperty("--table-header", hexToHSL(config.tableStyles.headerBg))
      root.style.setProperty("--table-row", hexToHSL(config.tableStyles.rowBg))
      root.style.setProperty("--table-border", hexToHSL(config.tableStyles.borderColor))
    }

    // Apply density (spacing)
    const spacing = generateSpacing(config.density)
    Object.entries(spacing).forEach(([size, value]) => {
      root.style.setProperty(`--spacing-${size}`, value)
    })

    // Apply shadows
    const shadows = generateShadows(config.shadowDepth)
    Object.entries(shadows).forEach(([size, value]) => {
      root.style.setProperty(`--shadow-${size}`, value)
    })
  }

  // Update theme config
  const updateConfig = (updates: Partial<ThemeConfig>) => {
    setConfig((prev) => ({ ...prev, ...updates }))
  }

  // Update nested theme config
  const updateNestedConfig = (category: keyof ThemeConfig, key: string, value: any) => {
    setConfig((prev) => ({
      ...prev,
      [category]: {
        ...prev[category as keyof ThemeConfig],
        [key]: value,
      },
    }))
  }

  if (!mounted) {
    return null
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Theme Configuration</CardTitle>
        <CardDescription>Customize your application appearance</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="colors">
          <div className="flex justify-between items-center mb-4">
            <TabsList>
              <TabsTrigger value="colors" className="flex items-center gap-1">
                <Palette className="h-4 w-4" />
                <span className="hidden sm:inline">Colors</span>
              </TabsTrigger>
              <TabsTrigger value="typography" className="flex items-center gap-1">
                <Type className="h-4 w-4" />
                <span className="hidden sm:inline">Typography</span>
              </TabsTrigger>
              <TabsTrigger value="layout" className="flex items-center gap-1">
                <Layout className="h-4 w-4" />
                <span className="hidden sm:inline">Layout</span>
              </TabsTrigger>
              <TabsTrigger value="components" className="flex items-center gap-1">
                <Sliders className="h-4 w-4" />
                <span className="hidden sm:inline">Components</span>
              </TabsTrigger>
              <TabsTrigger value="manage" className="flex items-center gap-1">
                <Save className="h-4 w-4" />
                <span className="hidden sm:inline">Manage</span>
              </TabsTrigger>
            </TabsList>

            <div className="flex items-center gap-2">
              <Button
                variant={theme === "light" ? "default" : "outline"}
                size="icon"
                onClick={() => setTheme("light")}
                className="h-8 w-8"
              >
                <Sun className="h-4 w-4" />
                <span className="sr-only">Light Mode</span>
              </Button>
              <Button
                variant={theme === "dark" ? "default" : "outline"}
                size="icon"
                onClick={() => setTheme("dark")}
                className="h-8 w-8"
              >
                <Moon className="h-4 w-4" />
                <span className="sr-only">Dark Mode</span>
              </Button>
              <Button
                variant={theme === "system" ? "default" : "outline"}
                size="icon"
                onClick={() => setTheme("system")}
                className="h-8 w-8"
              >
                <Laptop className="h-4 w-4" />
                <span className="sr-only">System Mode</span>
              </Button>
            </div>
          </div>

          <TabsContent value="colors" className="space-y-6">
            <Accordion type="single" collapsible defaultValue="primary">
              <AccordionItem value="primary">
                <AccordionTrigger>Primary Color Palette</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <ColorPicker
                    value={config.primaryColor}
                    onChange={(color) => updateConfig({ primaryColor: color })}
                    label="Primary Color"
                    description="Main brand color used throughout the interface"
                    showShades
                  />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div className="space-y-2">
                      <Label>Preview</Label>
                      <div className="space-y-2">
                        <div className="h-10 rounded-md bg-primary text-primary-foreground flex items-center justify-center">
                          Primary
                        </div>
                        <div className="h-10 rounded-md bg-primary/20 text-primary flex items-center justify-center">
                          Primary/20
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label>Contrast Check</Label>
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>With white text:</span>
                          <span>
                            {checkContrast("#ffffff", config.primaryColor).ratio.toFixed(2)}:1
                            {checkContrast("#ffffff", config.primaryColor).passes.aa ? " ✓" : " ✗"}
                          </span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>With black text:</span>
                          <span>
                            {checkContrast("#000000", config.primaryColor).ratio.toFixed(2)}:1
                            {checkContrast("#000000", config.primaryColor).passes.aa ? " ✓" : " ✗"}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="secondary">
                <AccordionTrigger>Secondary Color Palette</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <ColorPicker
                    value={config.secondaryColor}
                    onChange={(color) => updateConfig({ secondaryColor: color })}
                    label="Secondary Color"
                    description="Accent color used for secondary elements"
                    showShades
                  />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div className="space-y-2">
                      <Label>Preview</Label>
                      <div className="space-y-2">
                        <div
                          className="h-10 rounded-md flex items-center justify-center text-secondary-foreground"
                          style={{ backgroundColor: `hsl(${hexToHSL(config.secondaryColor)})` }}
                        >
                          Secondary
                        </div>
                        <div
                          className="h-10 rounded-md flex items-center justify-center border"
                          style={{
                            backgroundColor: `hsla(${hexToHSL(config.secondaryColor)}, 0.2)`,
                            color: `hsl(${hexToHSL(config.secondaryColor)})`,
                          }}
                        >
                          Secondary/20
                        </div>
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="semantic">
                <AccordionTrigger>Semantic Colors</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <ColorPicker
                      value={config.semanticColors.success}
                      onChange={(color) => updateNestedConfig("semanticColors", "success", color)}
                      label="Success Color"
                    />

                    <ColorPicker
                      value={config.semanticColors.warning}
                      onChange={(color) => updateNestedConfig("semanticColors", "warning", color)}
                      label="Warning Color"
                    />

                    <ColorPicker
                      value={config.semanticColors.error}
                      onChange={(color) => updateNestedConfig("semanticColors", "error", color)}
                      label="Error Color"
                    />

                    <ColorPicker
                      value={config.semanticColors.info}
                      onChange={(color) => updateNestedConfig("semanticColors", "info", color)}
                      label="Info Color"
                    />
                  </div>

                  <div className="mt-4">
                    <Label>Preview</Label>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 mt-2">
                      <div
                        className="h-10 rounded-md flex items-center justify-center text-white"
                        style={{ backgroundColor: config.semanticColors.success }}
                      >
                        Success
                      </div>
                      <div
                        className="h-10 rounded-md flex items-center justify-center text-white"
                        style={{ backgroundColor: config.semanticColors.warning }}
                      >
                        Warning
                      </div>
                      <div
                        className="h-10 rounded-md flex items-center justify-center text-white"
                        style={{ backgroundColor: config.semanticColors.error }}
                      >
                        Error
                      </div>
                      <div
                        className="h-10 rounded-md flex items-center justify-center text-white"
                        style={{ backgroundColor: config.semanticColors.info }}
                      >
                        Info
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="background">
                <AccordionTrigger>Background Colors</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <ColorPicker
                      value={config.backgroundColors.page}
                      onChange={(color) => updateNestedConfig("backgroundColors", "page", color)}
                      label="Page Background"
                    />

                    <ColorPicker
                      value={config.backgroundColors.card}
                      onChange={(color) => updateNestedConfig("backgroundColors", "card", color)}
                      label="Card Background"
                    />

                    <ColorPicker
                      value={config.backgroundColors.modal}
                      onChange={(color) => updateNestedConfig("backgroundColors", "modal", color)}
                      label="Modal Background"
                    />
                  </div>

                  <div className="mt-4">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="preview-dark-mode">Preview Dark Mode</Label>
                      <Switch id="preview-dark-mode" checked={previewDarkMode} onCheckedChange={setPreviewDarkMode} />
                    </div>
                  </div>

                  <div className="mt-4">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="auto-dark-mode">Auto-generate Dark Mode Colors</Label>
                      <Switch
                        id="auto-dark-mode"
                        checked={autoGenerateDarkMode}
                        onCheckedChange={setAutoGenerateDarkMode}
                      />
                    </div>
                    <p className="text-sm text-muted-foreground mt-1">
                      Automatically generate appropriate dark mode colors based on light mode selections
                    </p>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </TabsContent>

          <TabsContent value="typography" className="space-y-6">
            <Accordion type="single" collapsible defaultValue="font-family">
              <AccordionItem value="font-family">
                <AccordionTrigger>Font Family</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Font Family</Label>
                    <Select value={config.fontFamily} onValueChange={(value) => updateConfig({ fontFamily: value })}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a font" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="--font-inter" style={{ fontFamily: "var(--font-inter)" }}>
                          Inter
                        </SelectItem>
                        <SelectItem value="--font-roboto" style={{ fontFamily: "var(--font-roboto)" }}>
                          Roboto
                        </SelectItem>
                        <SelectItem value="--font-poppins" style={{ fontFamily: "var(--font-poppins)" }}>
                          Poppins
                        </SelectItem>
                        <SelectItem value="--font-lora" style={{ fontFamily: "var(--font-lora)" }}>
                          Lora
                        </SelectItem>
                        <SelectItem value="--font-playfair" style={{ fontFamily: "var(--font-playfair)" }}>
                          Playfair Display
                        </SelectItem>
                        <SelectItem value="--font-jetbrains" style={{ fontFamily: "var(--font-jetbrains)" }}>
                          JetBrains Mono
                        </SelectItem>
                        <SelectItem value="--font-source-code" style={{ fontFamily: "var(--font-source-code)" }}>
                          Source Code Pro
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="mt-4">
                    <Label>Custom Font URL (optional)</Label>
                    <Input
                      value={config.customFontUrl}
                      onChange={(e) => updateConfig({ customFontUrl: e.target.value })}
                      placeholder="https://fonts.googleapis.com/css2?family=..."
                      className="mt-1"
                    />
                    <p className="text-xs text-muted-foreground mt-1">Enter a Google Fonts URL to use a custom font</p>
                  </div>

                  <div className="mt-4 p-4 rounded-md border" style={{ fontFamily: `var(${config.fontFamily})` }}>
                    <p className="text-2xl font-bold">The quick brown fox jumps over the lazy dog</p>
                    <p className="mt-2">ABCDEFGHIJKLMNOPQRSTUVWXYZ</p>
                    <p className="mt-1">abcdefghijklmnopqrstuvwxyz 0123456789</p>
                    <p className="mt-1 text-sm">Font preview at different sizes:</p>
                    <p className="text-xs mt-1">Extra Small: The quick brown fox jumps over the lazy dog</p>
                    <p className="text-sm mt-1">Small: The quick brown fox jumps over the lazy dog</p>
                    <p className="text-base mt-1">Base: The quick brown fox jumps over the lazy dog</p>
                    <p className="text-lg mt-1">Large: The quick brown fox jumps over the lazy dog</p>
                    <p className="text-xl mt-1">Extra Large: The quick brown fox jumps over the lazy dog</p>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="font-scaling">
                <AccordionTrigger>Font Scaling</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <Label>Base Font Size: {config.baseFontSize}px</Label>
                    </div>
                    <Slider
                      value={[config.baseFontSize]}
                      min={12}
                      max={20}
                      step={1}
                      onValueChange={(value) => updateConfig({ baseFontSize: value[0] })}
                    />
                  </div>

                  <div className="space-y-2 mt-4">
                    <div className="flex justify-between">
                      <Label>Scale Ratio: {config.scaleRatio}</Label>
                    </div>
                    <Select
                      value={config.scaleRatio.toString()}
                      onValueChange={(value) => updateConfig({ scaleRatio: Number.parseFloat(value) })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select scale ratio" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1.067">Minor Second (1.067)</SelectItem>
                        <SelectItem value="1.125">Major Second (1.125)</SelectItem>
                        <SelectItem value="1.2">Minor Third (1.2)</SelectItem>
                        <SelectItem value="1.25">Major Third (1.25)</SelectItem>
                        <SelectItem value="1.333">Perfect Fourth (1.333)</SelectItem>
                        <SelectItem value="1.414">Augmented Fourth (1.414)</SelectItem>
                        <SelectItem value="1.5">Perfect Fifth (1.5)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="mt-4">
                    <Label>Type Scale Preview</Label>
                    <div className="mt-2 space-y-2">
                      {Object.entries(calculateTypeScale(config.baseFontSize, config.scaleRatio)).map(
                        ([size, value]) => (
                          <div key={size} className="flex justify-between items-center">
                            <span className="text-sm">
                              {size}: {value}
                            </span>
                            <span style={{ fontSize: value }}>{size}</span>
                          </div>
                        ),
                      )}
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="font-weights">
                <AccordionTrigger>Font Weights</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Heading Font Weight: {config.fontWeights.headings}</Label>
                    <Select
                      value={config.fontWeights.headings.toString()}
                      onValueChange={(value) => updateNestedConfig("fontWeights", "headings", Number.parseInt(value))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select heading weight" />
                      </SelectTrigger>
                      <SelectContent>
                        {themeOptions.fontWeightOptions.map((weight) => (
                          <SelectItem key={weight} value={weight.toString()}>
                            {weight}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2 mt-4">
                    <Label>Body Font Weight: {config.fontWeights.body}</Label>
                    <Select
                      value={config.fontWeights.body.toString()}
                      onValueChange={(value) => updateNestedConfig("fontWeights", "body", Number.parseInt(value))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select body weight" />
                      </SelectTrigger>
                      <SelectContent>
                        {themeOptions.fontWeightOptions.map((weight) => (
                          <SelectItem key={weight} value={weight.toString()}>
                            {weight}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="mt-4">
                    <Label>Font Weight Preview</Label>
                    <div className="mt-2 space-y-3">
                      <h1 className="text-2xl" style={{ fontWeight: config.fontWeights.headings }}>
                        Heading with weight {config.fontWeights.headings}
                      </h1>
                      <p className="text-base" style={{ fontWeight: config.fontWeights.body }}>
                        Body text with weight {config.fontWeights.body}. The quick brown fox jumps over the lazy dog.
                      </p>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </TabsContent>

          <TabsContent value="layout" className="space-y-6">
            <Accordion type="single" collapsible defaultValue="density">
              <AccordionItem value="density">
                <AccordionTrigger>Density Settings</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>UI Density</Label>
                    <RadioGroup
                      value={config.density}
                      onValueChange={(value) => updateConfig({ density: value as any })}
                      className="flex flex-col space-y-1"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="compact" id="density-compact" />
                        <Label htmlFor="density-compact">Compact</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="standard" id="density-standard" />
                        <Label htmlFor="density-standard">Standard</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="comfortable" id="density-comfortable" />
                        <Label htmlFor="density-comfortable">Comfortable</Label>
                      </div>
                    </RadioGroup>
                  </div>

                  <div className="mt-4">
                    <Label>Density Preview</Label>
                    <div className="mt-2 space-y-2">
                      <div className="flex flex-wrap gap-2">
                        <div
                          className="border rounded-md flex items-center justify-center"
                          style={{
                            padding:
                              config.density === "compact"
                                ? "4px 8px"
                                : config.density === "standard"
                                  ? "8px 16px"
                                  : "12px 24px",
                          }}
                        >
                          Button
                        </div>
                        <div
                          className="border rounded-md flex items-center justify-center"
                          style={{
                            padding:
                              config.density === "compact"
                                ? "4px 8px"
                                : config.density === "standard"
                                  ? "8px 16px"
                                  : "12px 24px",
                          }}
                        >
                          Button
                        </div>
                        <div
                          className="border rounded-md flex items-center justify-center"
                          style={{
                            padding:
                              config.density === "compact"
                                ? "4px 8px"
                                : config.density === "standard"
                                  ? "8px 16px"
                                  : "12px 24px",
                          }}
                        >
                          Button
                        </div>
                      </div>

                      <div
                        className="border rounded-md mt-4"
                        style={{
                          padding:
                            config.density === "compact" ? "8px" : config.density === "standard" ? "16px" : "24px",
                        }}
                      >
                        <div className="text-sm font-medium">Card Title</div>
                        <div className="text-sm text-muted-foreground">Card content with {config.density} density</div>
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="border-radius">
                <AccordionTrigger>Border Radius</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <Label>Border Radius: {config.borderRadius}px</Label>
                    </div>
                    <Slider
                      value={[config.borderRadius]}
                      min={0}
                      max={24}
                      step={1}
                      onValueChange={(value) => updateConfig({ borderRadius: value[0] })}
                    />
                  </div>

                  <div className="mt-4">
                    <Label>Border Radius Preview</Label>
                    <div className="mt-2 grid grid-cols-3 gap-4">
                      <div
                        className="h-16 bg-primary flex items-center justify-center text-primary-foreground"
                        style={{ borderRadius: `${config.borderRadius}px` }}
                      >
                        {config.borderRadius}px
                      </div>
                      <div
                        className="h-16 border flex items-center justify-center"
                        style={{ borderRadius: `${config.borderRadius}px` }}
                      >
                        {config.borderRadius}px
                      </div>
                      <div
                        className="h-16 bg-secondary flex items-center justify-center text-secondary-foreground"
                        style={{ borderRadius: `${config.borderRadius}px` }}
                      >
                        {config.borderRadius}px
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="shadow">
                <AccordionTrigger>Shadow/Elevation</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <Label>Shadow Depth: {config.shadowDepth}</Label>
                    </div>
                    <Slider
                      value={[config.shadowDepth]}
                      min={0}
                      max={5}
                      step={1}
                      onValueChange={(value) => updateConfig({ shadowDepth: value[0] })}
                    />
                  </div>

                  <div className="mt-4">
                    <Label>Shadow Preview</Label>
                    <div className="mt-2 grid grid-cols-3 gap-4">
                      {Object.entries(generateShadows(config.shadowDepth)).map(([key, value]) => (
                        <div
                          key={key}
                          className="h-16 bg-card flex items-center justify-center"
                          style={{
                            boxShadow: value,
                            borderRadius: `${config.borderRadius}px`,
                          }}
                        >
                          {key === "DEFAULT" ? "Default" : key}
                        </div>
                      ))}
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </TabsContent>

          <TabsContent value="components" className="space-y-6">
            <Accordion type="single" collapsible defaultValue="buttons">
              <AccordionItem value="buttons">
                <AccordionTrigger>Button Styles</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <ColorPicker
                      value={config.buttonStyles.primaryBg}
                      onChange={(color) => updateNestedConfig("buttonStyles", "primaryBg", color)}
                      label="Primary Button"
                      showContrastWarning
                      contrastAgainst="#ffffff"
                    />

                    <ColorPicker
                      value={config.buttonStyles.secondaryBg}
                      onChange={(color) => updateNestedConfig("buttonStyles", "secondaryBg", color)}
                      label="Secondary Button"
                    />

                    <ColorPicker
                      value={config.buttonStyles.tertiaryBg}
                      onChange={(color) => updateNestedConfig("buttonStyles", "tertiaryBg", color)}
                      label="Tertiary Button"
                    />
                  </div>

                  <div className="mt-4">
                    <Label>Button Preview</Label>
                    <div className="mt-2 flex flex-wrap gap-2">
                      <Button>Primary Button</Button>
                      <Button variant="secondary">Secondary Button</Button>
                      <Button variant="outline">Outline Button</Button>
                      <Button variant="ghost">Ghost Button</Button>
                      <Button variant="link">Link Button</Button>
                    </div>

                    <div className="mt-4 flex flex-wrap gap-2">
                      <Button disabled>Disabled</Button>
                      <Button size="sm">Small</Button>
                      <Button size="lg">Large</Button>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="inputs">
                <AccordionTrigger>Input Styles</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <ColorPicker
                      value={config.inputStyles.borderColor}
                      onChange={(color) => updateNestedConfig("inputStyles", "borderColor", color)}
                      label="Border Color"
                    />

                    <ColorPicker
                      value={config.inputStyles.focusBorderColor}
                      onChange={(color) => updateNestedConfig("inputStyles", "focusBorderColor", color)}
                      label="Focus Border"
                    />

                    <ColorPicker
                      value={config.inputStyles.errorBorderColor}
                      onChange={(color) => updateNestedConfig("inputStyles", "errorBorderColor", color)}
                      label="Error Border"
                    />
                  </div>

                  <div className="mt-4">
                    <Label>Input Preview</Label>
                    <div className="mt-2 space-y-4">
                      <Input placeholder="Default input" />
                      <Input placeholder="Disabled input" disabled />
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <Label htmlFor="name" className="mb-1 block">
                            Name
                          </Label>
                          <Input id="name" placeholder="John Doe" />
                        </div>
                        <div>
                          <Label htmlFor="email" className="mb-1 block">
                            Email
                          </Label>
                          <Input id="email" placeholder="john@example.com" type="email" />
                        </div>
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="tables">
                <AccordionTrigger>Table Styles</AccordionTrigger>
                <AccordionContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <ColorPicker
                      value={config.tableStyles.headerBg}
                      onChange={(color) => updateNestedConfig("tableStyles", "headerBg", color)}
                      label="Header Background"
                    />

                    <ColorPicker
                      value={config.tableStyles.rowBg}
                      onChange={(color) => updateNestedConfig("tableStyles", "rowBg", color)}
                      label="Row Background"
                    />

                    <ColorPicker
                      value={config.tableStyles.borderColor}
                      onChange={(color) => updateNestedConfig("tableStyles", "borderColor", color)}
                      label="Border Color"
                    />
                  </div>

                  <div className="mt-4">
                    <Label>Table Preview</Label>
                    <div className="mt-2 border rounded-md overflow-hidden">
                      <table className="w-full">
                        <thead style={{ backgroundColor: config.tableStyles.headerBg }}>
                          <tr>
                            <th
                              className="px-4 py-2 text-left"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              Name
                            </th>
                            <th
                              className="px-4 py-2 text-left"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              Email
                            </th>
                            <th
                              className="px-4 py-2 text-left"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              Role
                            </th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr style={{ backgroundColor: config.tableStyles.rowBg }}>
                            <td
                              className="px-4 py-2"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              John Doe
                            </td>
                            <td
                              className="px-4 py-2"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              john@example.com
                            </td>
                            <td
                              className="px-4 py-2"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              Admin
                            </td>
                          </tr>
                          <tr style={{ backgroundColor: config.tableStyles.rowBg }}>
                            <td
                              className="px-4 py-2"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              Jane Smith
                            </td>
                            <td
                              className="px-4 py-2"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              jane@example.com
                            </td>
                            <td
                              className="px-4 py-2"
                              style={{ borderBottom: `1px solid ${config.tableStyles.borderColor}` }}
                            >
                              User
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </TabsContent>

          <TabsContent value="manage">
            <ThemeManager currentConfig={config} />
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}


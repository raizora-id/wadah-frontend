{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/code-block",
  "name": "code-block",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "button",
    "select"
  ],
  "dependencies": [
    "@icons-pack/react-simple-icons",
    "@radix-ui/react-use-controllable-state",
    "@shikijs/transformers",
    "lucide-react",
    "shiki"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { cn } from '@/lib/utils';\nimport {\n  type IconType,\n  SiAstro,\n  SiBiome,\n  SiBower,\n  SiBun,\n  SiC,\n  SiCircleci,\n  SiCoffeescript,\n  SiCplusplus,\n  SiCss,\n  SiCssmodules,\n  SiDart,\n  SiDocker,\n  SiDocusaurus,\n  SiDotenv,\n  SiEditorconfig,\n  SiEslint,\n  SiGatsby,\n  SiGitignoredotio,\n  SiGnubash,\n  SiGo,\n  SiGraphql,\n  SiGrunt,\n  SiGulp,\n  SiHandlebarsdotjs,\n  SiHtml5,\n  SiJavascript,\n  SiJest,\n  SiJson,\n  SiLess,\n  SiMarkdown,\n  SiMdx,\n  SiMintlify,\n  SiMocha,\n  SiMysql,\n  SiNextdotjs,\n  SiPerl,\n  SiPhp,\n  SiPostcss,\n  SiPrettier,\n  SiPrisma,\n  SiPug,\n  SiPython,\n  SiR,\n  SiReact,\n  SiReadme,\n  SiRedis,\n  SiRemix,\n  SiRive,\n  SiRollupdotjs,\n  SiRuby,\n  SiSanity,\n  SiSass,\n  SiScala,\n  SiSentry,\n  SiShadcnui,\n  SiStorybook,\n  SiStylelint,\n  SiSublimetext,\n  SiSvelte,\n  SiSvg,\n  SiSwift,\n  SiTailwindcss,\n  SiToml,\n  SiTypescript,\n  SiVercel,\n  SiVite,\n  SiVuedotjs,\n  SiWebassembly,\n} from '@icons-pack/react-simple-icons';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport {\n  transformerNotationDiff,\n  transformerNotationErrorLevel,\n  transformerNotationFocus,\n  transformerNotationHighlight,\n  transformerNotationWordHighlight,\n} from '@shikijs/transformers';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport type { ComponentProps, HTMLAttributes, ReactElement } from 'react';\nimport {\n  cloneElement,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  type BundledLanguage,\n  type CodeOptionsMultipleThemes,\n  codeToHtml,\n} from 'shiki';\n\nconst filenameIconMap = {\n  '.env': SiDotenv,\n  '*.astro': SiAstro,\n  'biome.json': SiBiome,\n  '.bowerrc': SiBower,\n  'bun.lockb': SiBun,\n  '*.c': SiC,\n  '*.cpp': SiCplusplus,\n  '.circleci/config.yml': SiCircleci,\n  '*.coffee': SiCoffeescript,\n  '*.module.css': SiCssmodules,\n  '*.css': SiCss,\n  '*.dart': SiDart,\n  Dockerfile: SiDocker,\n  'docusaurus.config.js': SiDocusaurus,\n  '.editorconfig': SiEditorconfig,\n  '.eslintrc': SiEslint,\n  'eslint.config.*': SiEslint,\n  'gatsby-config.*': SiGatsby,\n  '.gitignore': SiGitignoredotio,\n  '*.go': SiGo,\n  '*.graphql': SiGraphql,\n  '*.sh': SiGnubash,\n  'Gruntfile.*': SiGrunt,\n  'gulpfile.*': SiGulp,\n  '*.hbs': SiHandlebarsdotjs,\n  '*.html': SiHtml5,\n  '*.js': SiJavascript,\n  '*.json': SiJson,\n  '*.test.js': SiJest,\n  '*.less': SiLess,\n  '*.md': SiMarkdown,\n  '*.mdx': SiMdx,\n  'mintlify.json': SiMintlify,\n  'mocha.opts': SiMocha,\n  '*.mustache': SiHandlebarsdotjs,\n  '*.sql': SiMysql,\n  'next.config.*': SiNextdotjs,\n  '*.pl': SiPerl,\n  '*.php': SiPhp,\n  'postcss.config.*': SiPostcss,\n  'prettier.config.*': SiPrettier,\n  '*.prisma': SiPrisma,\n  '*.pug': SiPug,\n  '*.py': SiPython,\n  '*.r': SiR,\n  '*.rb': SiRuby,\n  '*.jsx': SiReact,\n  '*.tsx': SiReact,\n  'readme.md': SiReadme,\n  '*.rdb': SiRedis,\n  'remix.config.*': SiRemix,\n  '*.riv': SiRive,\n  'rollup.config.*': SiRollupdotjs,\n  'sanity.config.*': SiSanity,\n  '*.sass': SiSass,\n  '*.scss': SiSass,\n  '*.sc': SiScala,\n  '*.scala': SiScala,\n  'sentry.client.config.*': SiSentry,\n  'components.json': SiShadcnui,\n  'storybook.config.*': SiStorybook,\n  'stylelint.config.*': SiStylelint,\n  '.sublime-settings': SiSublimetext,\n  '*.svelte': SiSvelte,\n  '*.svg': SiSvg,\n  '*.swift': SiSwift,\n  'tailwind.config.*': SiTailwindcss,\n  '*.toml': SiToml,\n  '*.ts': SiTypescript,\n  'vercel.json': SiVercel,\n  'vite.config.*': SiVite,\n  '*.vue': SiVuedotjs,\n  '*.wasm': SiWebassembly,\n};\n\ntype CodeBlockContextType = {\n  value: string | undefined;\n  onValueChange: ((value: string) => void) | undefined;\n};\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  value: undefined,\n  onValueChange: undefined,\n});\n\nexport type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  defaultValue?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n};\n\nexport const CodeBlock = ({\n  value: controlledValue,\n  onValueChange: controlledOnValueChange,\n  defaultValue,\n  className,\n  ...props\n}: CodeBlockProps) => {\n  const [value, onValueChange] = useControllableState({\n    defaultProp: defaultValue ?? '',\n    prop: controlledValue,\n    onChange: controlledOnValueChange,\n  });\n\n  return (\n    <CodeBlockContext.Provider value={{ value, onValueChange }}>\n      <div\n        className={cn('overflow-hidden rounded-md border', className)}\n        {...props}\n      />\n    </CodeBlockContext.Provider>\n  );\n};\n\nexport type CodeBlockHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nexport const CodeBlockHeader = ({\n  className,\n  ...props\n}: CodeBlockHeaderProps) => (\n  <div\n    className={cn(\n      'flex flex-row items-center border-b bg-secondary p-1',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type CodeBlockFilenameProps = HTMLAttributes<HTMLDivElement> & {\n  icon?: IconType;\n  value?: string;\n};\n\nexport const CodeBlockFilename = ({\n  className,\n  icon,\n  value,\n  children,\n  ...props\n}: CodeBlockFilenameProps) => {\n  const { value: activeValue } = useContext(CodeBlockContext);\n  const defaultIcon = Object.entries(filenameIconMap).find(([pattern]) => {\n    const regex = new RegExp(\n      `^${pattern.replace(/\\\\/g, '\\\\\\\\').replace(/\\./g, '\\\\.').replace(/\\*/g, '.*')}$`\n    );\n    return regex.test(children as string);\n  })?.[1];\n  const Icon = icon ?? defaultIcon;\n\n  if (value !== activeValue) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"flex grow items-center gap-2 bg-secondary px-4 py-1.5 text-muted-foreground text-xs\"\n      {...props}\n    >\n      {Icon && <Icon className=\"h-4 w-4 shrink-0\" />}\n      <span className=\"flex-1 truncate\">{children}</span>\n    </div>\n  );\n};\n\nexport type CodeBlockSelectProps = ComponentProps<typeof Select>;\n\nexport const CodeBlockSelect = (props: CodeBlockSelectProps) => {\n  const { value, onValueChange } = useContext(CodeBlockContext);\n\n  return <Select value={value} onValueChange={onValueChange} {...props} />;\n};\n\nexport type CodeBlockSelectTriggerProps = ComponentProps<typeof SelectTrigger>;\n\nexport const CodeBlockSelectTrigger = ({\n  className,\n  ...props\n}: CodeBlockSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'w-fit border-none text-muted-foreground text-xs shadow-none',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type CodeBlockSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const CodeBlockSelectValue = (props: CodeBlockSelectValueProps) => (\n  <SelectValue {...props} />\n);\n\nexport type CodeBlockSelectContentProps = ComponentProps<typeof SelectContent>;\n\nexport const CodeBlockSelectContent = (props: CodeBlockSelectContentProps) => (\n  <SelectContent {...props} />\n);\n\nexport type CodeBlockSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const CodeBlockSelectItem = ({\n  className,\n  ...props\n}: CodeBlockSelectItemProps) => (\n  <SelectItem className={cn('text-sm', className)} {...props} />\n);\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const CodeBlockCopyButton = ({\n  asChild,\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  className,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const { value } = useContext(CodeBlockContext);\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !value\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n      onCopy?.();\n\n      setTimeout(() => setIsCopied(false), timeout);\n    }, onError);\n  };\n\n  if (asChild) {\n    return cloneElement(children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={copyToClipboard}\n      className={cn('shrink-0', className)}\n      {...props}\n    >\n      {children ?? <Icon size={14} className=\"text-muted-foreground\" />}\n    </Button>\n  );\n};\n\ntype CodeBlockFallbackProps = HTMLAttributes<HTMLDivElement>;\n\nconst CodeBlockFallback = ({ children, ...props }: CodeBlockFallbackProps) => (\n  <div {...props}>\n    <pre className=\"w-full\">\n      <code>\n        {children\n          ?.toString()\n          .split('\\n')\n          .map((line, i) => (\n            <span key={i} className=\"line\">\n              {line}\n            </span>\n          ))}\n      </code>\n    </pre>\n  </div>\n);\n\nexport type CodeBlockBodyProps = HTMLAttributes<HTMLDivElement> & {\n  value: string;\n  lineNumbers?: boolean;\n  syntaxHighlighting?: boolean;\n};\n\nexport const CodeBlockBody = ({\n  value,\n  lineNumbers = true,\n  syntaxHighlighting = true,\n  children,\n  className,\n  ...props\n}: CodeBlockBodyProps) => {\n  const { value: activeValue } = useContext(CodeBlockContext);\n\n  if (value !== activeValue) {\n    return null;\n  }\n\n  const lineNumberClassNames = cn(\n    '[&_code]:[counter-reset:line]',\n    '[&_code]:[counter-increment:line_0]',\n    '[&_.line]:before:content-[counter(line)]',\n    '[&_.line]:before:inline-block',\n    '[&_.line]:before:[counter-increment:line]',\n    '[&_.line]:before:w-4',\n    '[&_.line]:before:mr-4',\n    '[&_.line]:before:text-[13px]',\n    '[&_.line]:before:text-right',\n    '[&_.line]:before:text-muted-foreground/50',\n    '[&_.line]:before:font-mono',\n    '[&_.line]:before:select-none'\n  );\n\n  const darkModeClassNames = cn(\n    'dark:[&_.shiki]:!text-[var(--shiki-dark)]',\n    'dark:[&_.shiki]:!bg-[var(--shiki-dark-bg)]',\n    'dark:[&_.shiki]:![font-style:var(--shiki-dark-font-style)]',\n    'dark:[&_.shiki]:![font-weight:var(--shiki-dark-font-weight)]',\n    'dark:[&_.shiki]:![text-decoration:var(--shiki-dark-text-decoration)]',\n    'dark:[&_.shiki_span]:!text-[var(--shiki-dark)]',\n    'dark:[&_.shiki_span]:!bg-[var(--shiki-dark-bg)]',\n    'dark:[&_.shiki_span]:![font-style:var(--shiki-dark-font-style)]',\n    'dark:[&_.shiki_span]:![font-weight:var(--shiki-dark-font-weight)]',\n    'dark:[&_.shiki_span]:![text-decoration:var(--shiki-dark-text-decoration)]'\n  );\n\n  const lineHighlightClassNames = cn(\n    '[&_.line.highlighted]:bg-blue-50',\n    '[&_.line.highlighted]:after:bg-blue-500',\n    '[&_.line.highlighted]:after:absolute',\n    '[&_.line.highlighted]:after:left-0',\n    '[&_.line.highlighted]:after:top-0',\n    '[&_.line.highlighted]:after:bottom-0',\n    '[&_.line.highlighted]:after:w-0.5',\n    'dark:[&_.line.highlighted]:bg-blue-800'\n  );\n\n  const lineDiffClassNames = cn(\n    '[&_.line.diff]:after:absolute',\n    '[&_.line.diff]:after:left-0',\n    '[&_.line.diff]:after:top-0',\n    '[&_.line.diff]:after:bottom-0',\n    '[&_.line.diff]:after:w-0.5',\n    '[&_.line.diff.add]:bg-emerald-50',\n    '[&_.line.diff.add]:after:bg-emerald-500',\n    '[&_.line.diff.remove]:bg-rose-50',\n    '[&_.line.diff.remove]:after:bg-rose-500',\n    'dark:[&_.line.diff.add]:bg-emerald-800',\n    'dark:[&_.line.diff.remove]:bg-rose-800'\n  );\n\n  const lineFocusedClassNames = cn(\n    '[&_code:has(.focused)_.line]:blur-[2px]',\n    '[&_code:has(.focused)_.line.focused]:blur-none'\n  );\n\n  const wordHighlightClassNames = cn(\n    '[&_.highlighted-word]:bg-blue-50',\n    'dark:[&_.highlighted-word]:bg-blue-800'\n  );\n\n  const codeBlockClassName = cn(\n    'mt-0 text-sm',\n    '[&_pre]:py-4',\n    '[&_.shiki]:!bg-[var(--shiki-bg)]',\n    '[&_code]:w-full',\n    '[&_code]:grid',\n    '[&_code]:overflow-x-auto',\n    '[&_.line]:px-4',\n    '[&_.line]:w-full',\n    '[&_.line]:relative',\n    lineHighlightClassNames,\n    lineDiffClassNames,\n    lineFocusedClassNames,\n    wordHighlightClassNames,\n    lineNumbers && lineNumberClassNames,\n    darkModeClassNames,\n    className\n  );\n\n  if (!syntaxHighlighting) {\n    return (\n      <CodeBlockFallback className={codeBlockClassName} {...props}>\n        {children}\n      </CodeBlockFallback>\n    );\n  }\n\n  return (\n    <div className={codeBlockClassName} {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport type CodeBlockContentProps = {\n  themes?: CodeOptionsMultipleThemes['themes'];\n  language?: BundledLanguage;\n  children: string;\n};\n\nexport const CodeBlockContent = ({\n  children,\n  themes,\n  language = 'typescript',\n}: CodeBlockContentProps) => {\n  const [html, setHtml] = useState<string | null>(null);\n\n  useEffect(() => {\n    codeToHtml(children as string, {\n      lang: language,\n      themes: themes ?? {\n        light: 'vitesse-light',\n        dark: 'vitesse-dark',\n      },\n      transformers: [\n        transformerNotationDiff({\n          matchAlgorithm: 'v3',\n        }),\n        transformerNotationHighlight({\n          matchAlgorithm: 'v3',\n        }),\n        transformerNotationWordHighlight({\n          matchAlgorithm: 'v3',\n        }),\n        transformerNotationFocus({\n          matchAlgorithm: 'v3',\n        }),\n        transformerNotationErrorLevel({\n          matchAlgorithm: 'v3',\n        }),\n      ],\n    })\n      .then(setHtml)\n      .catch(console.error);\n  }, [children, themes, language]);\n\n  if (!html) {\n    return <CodeBlockFallback>{children}</CodeBlockFallback>;\n  }\n\n  return (\n    <div\n      // biome-ignore lint/security/noDangerouslySetInnerHtml: \"Kinda how Shiki works\"\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n};\n",
      "target": "components/ui/kibo-ui/code-block/index.tsx"
    },
    {
      "type": "registry:ui",
      "path": "server.tsx",
      "content": "import {\n  transformerNotationDiff,\n  transformerNotationErrorLevel,\n  transformerNotationFocus,\n  transformerNotationHighlight,\n  transformerNotationWordHighlight,\n} from '@shikijs/transformers';\nimport {\n  type BundledLanguage,\n  type CodeOptionsMultipleThemes,\n  codeToHtml,\n} from 'shiki';\n\nexport type CodeBlockContentProps = {\n  themes?: CodeOptionsMultipleThemes['themes'];\n  language?: BundledLanguage;\n  children: string;\n};\n\nexport const CodeBlockContent = async ({\n  children,\n  themes,\n  language = 'typescript',\n  ...props\n}: CodeBlockContentProps) => {\n  const html = await codeToHtml(children as string, {\n    lang: language,\n    themes: themes ?? {\n      light: 'vitesse-light',\n      dark: 'vitesse-dark',\n    },\n    transformers: [\n      transformerNotationDiff({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationHighlight({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationWordHighlight({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationFocus({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationErrorLevel({\n        matchAlgorithm: 'v3',\n      }),\n    ],\n  });\n\n  return (\n    <div\n      // biome-ignore lint/security/noDangerouslySetInnerHtml: \"Kinda how Shiki works\"\n      dangerouslySetInnerHTML={{ __html: html }}\n      {...props}\n    />\n  );\n};\n",
      "target": "components/ui/kibo-ui/code-block/server.tsx"
    }
  ]
}
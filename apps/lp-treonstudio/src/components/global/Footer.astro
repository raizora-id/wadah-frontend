---
// Fundations
import Text from "@/components/fundations/elements/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
const navigationItems = [
  {
    title: "Connect",
    items: [
      { href: "#_", text: "GitHub" },
      { href: "#_", text: "Twitter" },
      { href: "#_", text: "Instagram" },
      { href: "#_", text: "Linked In" },
    ],
  }
];
---

<footer class="bg-base-50 dark:bg-base-800 overflow-hidden">
  <Wrapper variant="standard">
    <div
      class="flex flex-col divide-y divide-base-300 dark:divide-base-700 border-b border-base-300 dark:border-base-700"
    >
      {
        navigationItems.map((section) => (
          <div class="grid grid-cols-1 md:grid-cols-2 gap-1 py-8">
            <Text
              tag="h3"
              variant="displayXL"
              class="dark:text-white text-base-900 font-medium tracking-tighter"
            >
              {section.title}
            </Text>
            <div class="mt-2  grid grid-cols-1 md:grid-cols-2 gap-1">
              {section.items.map((item) => (
                <a
                  href={item.href}
                  class="    text-sm text-base-700 hover:text-accent-500 dark:hover:text-accent-300 dark:text-base-400 duration-500"
                >
                  {item.text}
                </a>
              ))}
            </div>
          </div>
        ))
      }
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 pb-12 pt-8">
      <Text
        tag="p"
        variant="textSM"
        class="text-base-700 dark:text-base-400 pt-2 md:text-balance"
      >
        Â© Copyright TreonStudio <span id="year"></span>. All rights
        reserved. Designed and built in the Raizora House.
      </Text>
      <div class="text-right">
        <Text
          tag="p"
          variant="displayXL"
          class="dark:text-white text-base-900 font-medium tracking-tighter lg:ml-auto"
        >
          <span id="clock"> </span>
        </Text>
        <Text
          tag="span"
          variant="textSM"
          class="text-base-700 dark:text-base-400 mt-1"
        >
          Helsinki, Finland
        </Text>
      </div>
    </div>

    <svg
      class="-mb-12 text-base-900 dark:text-base-900"
      viewBox="0 0 215 76"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clip-path="url(#clip0_735_10)">
        <path
          d="M-2.89402 -5.52001H18.834V33.232L36.754 13.52H62.066L38.77 37.936L62.514 74H39.442L24.882 49.584L18.834 56.08V74H-2.89402V-5.52001ZM78.6009 75.344C72.1049 75.344 66.3929 74.0373 61.4649 71.424C56.5369 68.8107 52.6915 65.1147 49.9289 60.336C47.2409 55.5573 45.8969 50.032 45.8969 43.76C45.8969 37.488 47.2409 31.9627 49.9289 27.184C52.6915 22.4053 56.5369 18.7093 61.4649 16.096C66.3929 13.4827 72.1049 12.176 78.6009 12.176C85.0969 12.176 90.8089 13.4827 95.7369 16.096C100.665 18.7093 104.473 22.4053 107.161 27.184C109.924 31.9627 111.305 37.488 111.305 43.76C111.305 50.032 109.924 55.5573 107.161 60.336C104.473 65.1147 100.665 68.8107 95.7369 71.424C90.8089 74.0373 85.0969 75.344 78.6009 75.344ZM78.6009 59.776C81.9609 59.776 84.5369 58.3947 86.3289 55.632C88.1209 52.8693 89.0169 48.912 89.0169 43.76C89.0169 38.6827 88.1209 34.7627 86.3289 32C84.5369 29.1627 81.9609 27.744 78.6009 27.744C75.2409 27.744 72.6649 29.1627 70.8729 32C69.0809 34.7627 68.1849 38.6827 68.1849 43.76C68.1849 48.912 69.0809 52.8693 70.8729 55.632C72.6649 58.3947 75.2409 59.776 78.6009 59.776ZM130.116 74C123.321 74 118.356 72.432 115.22 69.296C112.084 66.0853 110.516 61.008 110.516 54.064V-0.704011H132.244V50.928C132.244 53.84 132.841 55.856 134.036 56.976C135.23 58.096 137.134 58.656 139.748 58.656H148.036V74H130.116ZM100.212 13.52H148.036V28.864H100.212V13.52ZM170.171 75.344C163.749 75.344 158.075 74.0373 153.147 71.424C148.293 68.8107 144.523 65.1147 141.835 60.336C139.147 55.5573 137.803 50.032 137.803 43.76C137.803 37.488 139.147 31.9627 141.835 27.184C144.523 22.4053 148.293 18.7093 153.147 16.096C158.075 13.4827 163.749 12.176 170.171 12.176C176.592 12.176 182.192 13.5573 186.971 16.32C191.749 19.008 195.408 22.8907 197.947 27.968C200.485 32.9707 201.755 38.832 201.755 45.552V49.36H160.203C160.277 52.8693 161.248 55.5573 163.115 57.424C164.981 59.216 167.483 60.112 170.619 60.112C172.859 60.112 174.725 59.7013 176.219 58.88C177.712 57.984 178.795 56.528 179.467 54.512L200.971 55.632C199.328 61.9787 195.781 66.8693 190.331 70.304C184.88 73.664 178.16 75.344 170.171 75.344ZM180.027 37.712C179.952 34.2773 179.019 31.6267 177.227 29.76C175.509 27.8933 173.157 26.96 170.171 26.96C167.333 26.96 165.019 27.9307 163.227 29.872C161.435 31.8133 160.427 34.4267 160.203 37.712H180.027ZM195.027 13.52H216.755V74H195.027V13.52ZM194.691 -7.76001H217.091V7.47199H194.691V-7.76001Z"
          fill="currentColor"></path>
      </g>
      <defs>
        <clipPath id="clip0_735_10">
          <rect width="215" height="76" fill="white"></rect>
        </clipPath>
      </defs>
    </svg>
  </Wrapper>
</footer>
<script type="module">
  function updateClock() {
    // Create a new Date object based on Helsinki's timezone
    const now = new Date().toLocaleString("en-US", {
      timeZone: "Asia/Jakarta",
    });

    // Convert the time string to a Date object
    const dateObj = new Date(now);

    let hours = dateObj.getHours(); // 0-23
    const minutes = dateObj.getMinutes(); // 0-59
    // Show seconds if you want to remove the comment from here
    // const seconds = dateObj.getSeconds(); // 0-59
    const period = hours >= 12 ? "PM" : "AM"; // Determine if it's AM or PM

    // Convert hours to 12-hour format
    hours = hours % 12;
    hours = hours ? hours : 12; // Handle the case for 12 AM and 12 PM

    // Format time as HH:MM:SS AM/PM
    const timeString =
      [
        hours.toString().padStart(2, "0"),
        minutes.toString().padStart(2, "0"),
        // Show seconds if you want to remove the comment from here
        // seconds.toString().padStart(2, "0"),
      ].join(":") +
      " " +
      period;

    // Update the clock element with the time
    document.getElementById("clock").textContent = timeString;
  }

  // Update the year every second
  function updateYear() {
    const currentYear = new Date().getFullYear(); // Get the current year
    document.getElementById("year").textContent = currentYear; // Update the year in the span
  }

  // Update the clock every second
  setInterval(updateClock, 1000);

  // Initialize the clock and year
  updateClock();
  updateYear();
</script>
